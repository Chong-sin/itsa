#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_INPUT_SIZE 1024

typedef struct {
    int key;
    int value;
} Pair;

typedef struct {
    Pair *data;
    int size;
    int capacity;
} Map;

void init_map(Map *map) {
    map->data = (Pair *)malloc(sizeof(Pair) * 10);
    map->size = 0;
    map->capacity = 10;
}

void free_map(Map *map) {
    free(map->data);
}

int find(Map *map, int key) {
    for (int i = 0; i < map->size; i++) {
        if (map->data[i].key == key) {
            return i;
        }
    }
    return -1;
}

void insert(Map *map, int key) {
    int index = find(map, key);
    if (index == -1) {
        if (map->size == map->capacity) {
            map->capacity *= 2;
            map->data = (Pair *)realloc(map->data, sizeof(Pair) * map->capacity);
        }
        map->data[map->size].key = key;
        map->data[map->size].value = 1;
        map->size++;
    } else {
        map->data[index].value++;
    }
}

void clear_map(Map *map) {
    map->size = 0;
}

int main() {
    Map map;
    init_map(&map);
    
    char num[MAX_INPUT_SIZE];
    
    while (fgets(num, MAX_INPUT_SIZE, stdin)) {
        int a = 0;
        char *token = strtok(num, " ");
        
        while (token != NULL) {
            int t = atoi(token);
            insert(&map, t);
            a++;
            token = strtok(NULL, " ");
        }
        
        int maxf = 0, maxs = 0;
        for (int i = 0; i < map.size; i++) {
            if (map.data[i].value > maxs) {
                maxs = map.data[i].value;
                maxf = map.data[i].key;
            }
        }
        
        if (maxs > a / 2) {
            printf("%d\n", maxf);
        } else {
            printf("NO\n");
        }
        
        clear_map(&map);
    }
    
    free_map(&map);
    
    return 0;
}
